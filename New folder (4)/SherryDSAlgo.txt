COUNT ME IN

Given a number, determine the number of times each of its digits is repeated in the number.

An integer

List down all the digits of the integer in ascending order, each in a new line followed by its number of occurences separated by space

Input1:

9999

Output1:

9 4

Input2:

10902030

Output2:

0 4

1 1

2 1

3 1

9 1

2 1


import java.util.*;
import java.io.*;
public class CountMeIn
{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        //System.out.println("Enter the number ;");
        int num=sc.nextInt();
        int[] arr =new int[50];
        while(num!=0)
        {
          int lastDigit=num % 10;
          arr[lastDigit]++;
          num=num/10;    
        }
        //System.out.println("Digits : Frequency");
        for(int i=0;i<arr.length;i++)
        {
            if(arr[i]!=0)
            System.out.println(i+" "+arr[i]); 
        }
        sc.close();
    }
}

-------------------------------------------------------------------------------------
CHOTU

Write a complete program to find the length of  minimum subsequence of '1' in the given string of '0' & '1' s 

for Example: 

if the given string is '01111001110111011110001110111111

Minimum subsequence of '1'  in the given string is '111' and the length is '3'. 

Note: if there is no subsequence of '1' print '-1



A string containing the '0' & '1'  the length of the string will be not more than 100.


Print the length of minimum subsequence of '1' s 

if there is no subsequence of '1' then just print '-1'

Input

0110110011110111110111

Output

2

Input

00000

Output

-1

#include<iostream>
#include<cstring>
#include<sstream>
using namespace std;
void chotuu(int arr[],int n)
{
   int count=0,temp=0,min=2147483647;
  
   for(int i=0;i<n;i=i)
   {
    for(int j=i;j<n;j++)
   	{		 
   		if(arr[j]==1)
   		{
   			count++;
		}
			i++;
		if(arr[j]==0)
		{
			break;
		}	
	}
	temp=count;  
	if(temp<min&&temp!=0)
	   {
	   	min=count;
	   }
		count=0;	
    }
	if(temp==0)
	{
		cout<<-1;
	}
	else		
		cout<<min;

}
int main()
{
	string str;
	cin>>str;
	int N=str.length();
	int arr[N];
	for(int i=0;i<N;i++)
	{
		arr[i]=str[i]-48;
	}	
	chotuu(arr,N);
}


------------------------------------------------------------------------------------
MOTU

Write a complete program to find the length of maximum subsequence of '1' in the given string as '0' & '1' 

if there is no subsequence of '1' print '-1'

A string containing the '0' & '1'  the length of the string will be not more than hundred


Print the length of maximum subsequence of '1' s 


Input

10110111101010111101

Output

4

Input

01101

Output

2


Input

01101

Output

2

#include<iostream>
#include<cstring>
#include<sstream>
using namespace std;
void motuu(int arr[],int n)
{
   int count=0, temp=0,max=0;
   bool f=true;
   for(int i=0;i<n;i=i)
   {
    for(int j=i;j<n;j++)
   	{		 
   		if(arr[j]==1)
   		{
   			count++;
		}
		i++;
		if(arr[j]==0)
		{
			break;
		}	
	 }
	 int m;
	 temp=count;	
	
	 if(temp>max&&temp!=0)
	 {
	   	max=count;
	 }
		count=0;	
    }
	if(temp==0)
	{
		cout<<-1;
	}
	else		
		cout<<max;

}
int main()
{
	string str;
	cin>>str;
	int N=str.length();
	int arr[N];
	for(int i=0;i<N;i++)
	{
		arr[i]=str[i]-48;
	}	
	motuu(arr,N);
}

------------------------------------------------------------------------------

MY APPA, MY AMMA

Most crossword puzzle fans are used to anagrams--groups of words with the same letters in different orders--for example OPTS, SPOT, STOP, POTS and POST. Some words however do not have this attribute, no matter how you rearrange their letters, you cannot form another word. Such words are called ananagrams, an example is QUIZ.

Obviously such definitions depend on the domain within which we are working; you might think that ATHENE is an ananagram, whereas any chemist would quickly produce ETHANE. One possible domain would be the entire English language, but this could lead to some problems. One could restrict the domain to, say, Music, in which case SCALE becomes a relative ananagram (LACES is not in the same domain) but NOTE is not since it can produce TONE.

Write a program that will read in the dictionary of a restricted domain and determine the anagrams. The dictionary will contain no more than 100 words.

NOTE: Usage of Java Collection APIs is NOT PERMITTED



First line of Input will consist of an Integer N (the size of dictionary 2<=N<=100), followed by N number of lines. Each line consists of a word. Each word consists of up to 20 lower case letters.

Note: No duplicate words are present.


Print all the anagram Words, each word in separate line, terminated by newline character and maintaining the input order. There will always be at least more than one anagram.


Sample Input 1

5
dealer 
came 
tape 
soon 
leader

Sample Output 1

dealer
leader

Sample Input 2

6
rofff
one
rooff
eon
fofor
two

Sample Output 2

one
rooff
eon
fofor



#include<iostream>
#include<cstring>
#include<bits/stdc++.h>
using namespace std;
void checkangaram(int N)
{
    char **c;
	c=new char*[N];
	string *num;
	num=new string[N];
	string *s;
	s=new string[N];
	char temp;
	for(int i=0;i<N;i++)
	{
		c[i] = new char[20];      //initialise the character
	}
	for(int i=0;i<N;i++)
	{
		cin>>c[i];            //TAKE INPUTS FROM USER
	}
	for(int i=0;i<N;i++)
	{
		s[i]=c[i];          //copy the character pointer to string;
	}
	
	for(int k=0;k<N;k++)
	{
		int len=strlen(c[k]);
	for(int i=0;i<len;i++)               //bubble sort the array
	{	
		for(int j=0;j<len-i-1;j++)
		{
			if(c[k][j]>c[k][j+1])
			{
				temp=c[k][j];
				c[k][j]=c[k][j+1];
				c[k][j+1]=temp;
			}
		}
	}
}
/*for(int i=0;i<N;i++)   // to display the sorted array
{
	cout<<c[i]<<endl;
} */ 
    for(int i=0;i<N;i++)         //if N=2
	{
		for(int j=i+1;j<N;j++)
		{
	    if(strcmp(c[i],c[j])==0)
	    {
	   // cout<<"//////////////////////"<<endl;
		num[i]=s[i];
	    num[j]=s[j];
		break;
     	}
	} 
	
} 
for(int i=0;i<N;i++)
{
	cout<<num[i]<<endl;
 } 
//	cout<<l;
  //  int k=0;
/*	while(k<N)
	{
		int a,b,l;
		for(int i=k;i<N;i++)
		{
			if(i<N-1&&strlen(s[k])==strlen(s[i+1]))
			{
				a=k;
				b=i+1;
		        l=strlen(s[k]);
		       // sort(s[i], s[i]+sizeof(s[i]));  // for character array pointer
		        //sort(s[i], s[i]+sizeof(s[i]));
		        //cout<<s[i];
				sort(begin(s[k]),end(s[k]));   // for string pointer
			    sort(begin(s[i+1]),end(s[i+1]));
			    l=strlen(s[k]);
				for(int j=0;j<l;j++)
				{
				  if(*(*(s+k)+j)==*(*(s+(i+1))+j))
				  {
				  	count++;
				  	cout<<"anagram" ;
				  }
				  else break;	
				}
			}
			count=0;
		
		} 
			k++;
			if(count==l)
			{
				for(int i=0;i<l;i++)
				{
					cout<<*(*(s+a)+i);
				}
				cout<<endl;
				 for(int i=0;i<l;i++)
				{
					cout<<*(*(s+b)+i);
				}
			}
	} */ 

}
int main()
{
	int n=0;
	cin>>n;
	checkangaram(n);
	return 0;	
}


----------------------------------------------------------------------------------------------------------------------------------
KITNE AADMI THE?


You have to write a program to count the number of words in the input. The program should read in the input text till end_of_file (EOF) and output the number of words found. A word can be taken to be a sequence of alphanumeric characters terminated by a space or by a newline. Assume that there will not be any characters other than alphanumeric (a-z, A-Z, 0-9) and white spaces (blank, tabs and newlines) in the input.


a paragraph comprising of alphabets, numerals and white spaces.


a single integer representing the number of words in the paragraph


Input:
This is a sample line of text
This is another line of text
This line is the 3rd line
This junk line contains 989902 99dsaWjJ8            015
This is the fifth and the last line of input
Output:
36

Input:
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789
Output:
1



import java.io.*;
import java.util.*;

class CountWords{
   
 public static void main (String[] args) {
       
int sum =0;
     
Scanner sc = new Scanner(System.in);
       
//System.out.println("Enter the paragraph ");
       
 while(sc.hasNext()){
           
 String line = sc.nextLine();
           
 String[] arr = line.split(" ");
           
int word = 0;
           
 for(int i=0; i<arr.length; i++){
             
  word++;
           
}
           
sum = sum + word;
       
 }
       
 System.out.println(sum);
 
   }
}


----------------------------------------------------------------------------------------------------------------------------------------
KEYPAD CELLPHONE


Cell phones have become an essential part of modern life. In addition to making voice calls, cell phones can be used to send text messages, which are known as SMS for short. Unlike computer keyboards, most cell phones have limited number of keys. To accommodate all alphabets, letters are compacted into single key. Therefore, to type certain characters, a key must be repeatedly pressed until that character is shown on the display panel. In this problem we are interested in finding out the number of times keys on a cell phone must be pressed to type a particular message.

In this problem we will assume that the keypad of our cell phone is arranged as follows.

 	abc	def
ghi	jkl	mno
pqrs	tuv	wxyz
 		 
In the above grid each cell represents one key. Here sp means a space. In order to type the letter ‘a’, we must press that key once, however to type ‘b’ the same key must be repeatedly pressed twice and for ‘c’ three times. In the same manner, one key press for ‘d’, two for ‘e’ and three for ‘f’. This is also applicable for the remaining keys and letters. Note that it takes a single press to type a space.




A single line of input comprising of a set of words. A word is formed by lower-case alphabets and white spaces. The maximum length of the line can be 40 characters, including white spaces.



Output the number of key presses required to type the message.



Input:

welcome to ulab

Output:

29




#include<iostream>
#include<string>
#include<bits/stdc++.h>
using namespace std;
int main()
{
    const int arr[] = { 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 
                    2, 3, 1, 2, 3, 4, 1, 2, 3, 1, 2, 3, 4}; 
	int count=2;
	string str;
	getline(cin,str);

	int len=str.length();
	//cout<<len;
	for (int i = 0; i < len; i++) 
        count = count + arr[str[i] - 'a']; 
        cout<<count;
	return 0;
}



--------------------------------------------------------------------------------------------------------------------------------------------

JAADU, TERA YE JAADU!!!


In recreational mathematics, a magic square is an N X N square grid (where N is the number of cells on each side) filled with distinct positive integers in the range 1,2,...,n^2 such that each cell contains a different integer and the sum of the integers in each row, column and diagonal is equal.

Given a square matrix as input, determine whether it is a magic square or not. Print "ITS A MAGIC!" if the square matrix is a magic square, otherwise print "NO MAGIC".

Assumptions:

1) All the elements of the square matrix are different and in the range, 1,2,...,n^2. Hence need not be verified.

2) The row and column size are to be accepted in R and C, as integer inputs, and R & C, both are >=2, even though it is a square matrix. In any case, R is equal to C and need not be verified.

 

      2	    7	  6	 =15
      9	    5	  1	 =15
=15   4	    3	  8	 =15
    =15	  =15	=15	 =15






1.First line of input will comprise of two integers, R and C representing the row and column size of the matrix, separated by a space.
2.Each of the next R lines will comprise of C integers in the range 1,2,...,n^2, each separated by a space.



Print "ITS A MAGIC!" if the square matrix is a magic square, otherwise print "NO MAGIC"



Input1:

3 3

2 7 6

9 5 1

4 3 8

Output1:

ITS A MAGIC

Input2:

2 2

1 2

3 4

Output2:

NO MAGIC



#include<iostream>
#include<string>
using namespace std;
int main()
{
    int n,m,d1=0,d2=0,rowsum=0,r1,c1,colsum=0;
//cout<<"Enter the size of square";
cin>>n;
cin>>m;
//cout<<n<<" "<<m<<endl;
int a[n][m];
//cout<<"enter elements";
 for(int i=1;i<=n;i++)
 {
 	for(int j=1;j<=m;j++)
 	{
 		cin>>a[i][j];
	 }
}
 //cout<<"your square matrix"<<endl;
 /* for(int i=1;i<=n;i++)
  {
  	for(int j=1;j<=m;j++)
  	{
  		cout<<a[i][j]<<'\t';
	  }
	cout<<'\n';
  }*/
  if(n==m){
  for(int i=1;i<=n;i++)
  {
  	for(int j=1;j<=m;j++)
  	{
  	 if(i==j)
	   {
	   	d1=d1+a[i][j];
		}
	  }
  }
  for(int i=1;i<=n;i++)
  {
  	rowsum=0;
  	for(int j=1;j<=m;j++)
  	{ 
	   	rowsum=rowsum+a[i][j];		
	  }
	  if(d1!=rowsum){ 
	  	break;
	  }	  
}
	  for(int i=1;i<=n;i++)
  {
  	colsum=0;
	  for(int j=1;j<=m;j++)
  	{ 
	   	colsum=colsum+a[j][i];	
	  }
	  if(d1!=colsum){
	  	
	  	break;
	  }
  }
  //cout<<"D1 :"<<d1<<"rowsum :"<<rowsum<<"colsum :"<<colsum;
  if(d1==rowsum&&d1==colsum){
  	cout<<"\nITS A MAGIC!";
  }
  else{
  	cout<<"\nNO MAGIC";
  }
}
else{
	cout<<"\n Not a magic";
}
  return 0;
}



